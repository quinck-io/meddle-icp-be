type Data = record {
    unit_id: text;
    sensor_id: text;
    value: float32;
    timestamp: nat64;
};

type SingleInput = record {
    sensorId: text;
    value: float32;
    timestamp: nat64;
    timestampString: text;
};

type JsonInput = record {
    endpoint: text;
    variables: vec SingleInput;
};

type OperationResult = record {
    unit_id: vec text;
    code: nat16;
    message: text;
};

type OutputData = variant { 
    Ok: record { data: vec Data; len: nat32; };
    Err: OperationResult;
};

service : {
    "greet": (text) -> (text) query;
    "post_data": (vec_json_data: vec JsonInput) -> (output: OperationResult);
    "get_record": (unit_id: text) -> (output: OutputData) query;
    "get_all_unit_ids": (offset: nat32, limit: nat32, from_latest: bool) -> (output: record { unit_ids: vec text; len: nat32; }) query;
    "get_data": (offset: nat32, limit: nat32, from_latest: bool) -> (output: record { data: vec Data; len: nat32; }) query;
    "get_data_by_range": (start: nat64, end: opt nat64, offset: nat32, limit: nat32, from_latest: bool) -> (output: record { data: vec Data; len: nat32; }) query;
    "get_data_by_sensor": (sensor: text, offset: nat32, limit: nat32, from_latest: bool) -> (output: record { data: vec Data; len: nat32; }) query;
    "get_data_by_sensor_filter": (sensor: text, value: float32, comparator: text, offset: nat32, limit: nat32, from_latest: bool) -> (output: OutputData) query;
}
