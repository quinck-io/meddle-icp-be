type JsonData = variant {
    
    MachineData: record {
        id: text;
        timestap: nat64;
        voltge: int32;
        tension: int32;
        temperature: int32;
    };

    MachineDataCreation: record {
        timestap: nat64;
        voltge: int32;
        tension: int32;
        temperature: int32;
    };

};

type Result = record {
    id_record: text;
    code: nat16;
    message: text;
};

type OutputData = variant { 
    Ok: vec JsonData; 
    Err: Result;
};

service : {
    "greet": (text) -> (text) query;
    "post_data": (json_data: JsonData) -> (output: Result);
    "get_record": (id_record: text) -> (variant {Ok: JsonData; Err: Result}) query;
    "get_data": (offset: nat32, limit: nat32) -> (output: OutputData) query;
    "get_data_by_range": (start: nat64, end: opt nat64) -> (output: OutputData) query;
    "get_data_by_voltage": (comparator: text, voltage: nat32) -> (output: OutputData) query;
    "get_data_by_tension": (comparator: text, tension: nat32) -> (output: OutputData) query;
    "get_data_by_temperature": (comparator: text, temp: nat32) -> (output: OutputData) query;
}
